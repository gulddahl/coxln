% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simCP.R
\name{simCPLNRoot}
\alias{simCPLNRoot}
\title{Simulate Cox process with arbitrary covariance function on tree-shaped linear network}
\usage{
simCPLNRoot(
  pos,
  simalgo,
  sigma = 1,
  transform = "lgcp",
  h = 1,
  rho = 1,
  orderV = makeorderV(as.linnet(pos)),
  savelambda = TRUE
)
}
\arguments{
\item{pos}{A point pattern on L defining the discretisation of the network.}

\item{simalgo}{A vector of values used as parameters in the underlying
exponential covariance functions; can be created conveniently by the function
simalgotypes to match a particular covariance function. The length of this vector
gives the number of underlying simulations.}

\item{sigma}{The standard deviation used in the GRF. Ignored if transform=="pcpp".}

\item{transform}{The transform applied to the GRF. "lgcp" gives a log Gaussian
Cox process), "icp" gives an interupted Cox process, and "pcpp" gives a permanental
Cox point process.}

\item{h}{The number of independent GRFs used in "icp" or "pcpp"; ignored if transform
is "lgcp".}

\item{rho}{The mean number of points in the Cox process per unit length of network;
ignored if transform=="none".}

\item{orderV}{The order on the vertices used for defining the order of the
line segments used in the simulation; default is the order given by the function makeorderV.
Warning: Using other orders may result in a simulation with the wrong distribution.}
}
\value{
A point process on a linear network with class lpp.
}
\description{
Simulates a Gaussian random Field with arbitrary covariance function on a
tree-shaped linear network using average of simulations with
exponential covariance functions with parameters drawn from
a given Bernstein density.

Simulates a Cox process (a log Gaussian Cox process, interrupted
Cox process or permanental Cox point process) on a tree-shaped linear
network by the taking the average of a number of simulations each
using sequential simulation on the line segments
one at a time starting from the root of the tree. The underlying Gaussian
random field is equipped with an arbitrary covariance function.
}
\details{
This function simulates a Cox process by simulating a number of
Gaussian random Fields each with exponential covariance function on a
tree-shaped linear network with parameters drawn from
a given Bernstein density. Using the average of these simulations an approximate
simulation of a Gaussian Random Field with the covariance function corresponding
to the used Bernstein density is achieved for a sufficiently high number of
simulations, since a central limit
theorem ensures it converges to the right distribution, when the number of
simulations from the Bernstein distribution increases. The Gaussian random fields
are transformed using a transformation depending which type of Cox process is wanted
(i.e. a log Gaussian Cox process, interrupted
Cox process or permanental Cox point process), and the resulting field is
used as an intensity in a Poisson process on the linear network.
}
\examples{
# simulation of LGCP with gamma Bernstein density
pos = makepos(as.linnet(spatstat.data::dendrite),0.5,duplicate=TRUE)
simalgo = simalgotypes(param=c(5,5),type="gamma",nsim=50)
X = simCPLNRoot(pos,simalgo,sigma=1,transform="lgcp",rho=0.1)
plot(attr(X,"Lambda"),style="width",col="grey",main="")
points(X,cex=0.5)

# simulation of ICP with inverse gamma Bernstein density
pos = makepos(as.linnet(spatstat.data::dendrite),0.5,duplicate=TRUE)
simalgo = simalgotypes(param=c(5,5),type="invgamma",nsim=50)
X = simCPLNRoot(pos,simalgo,sigma=1,transform="icp",h=1,rho=0.1)
plot(attr(X,"Lambda"),style="width",col="grey",main="")
points(X,cex=0.5)

# simulation of PCPP with generalized inverse Gaussian Bernstein density
pos = makepos(as.linnet(spatstat.data::dendrite),0.5,duplicate=TRUE)
simalgo = simalgotypes(param=c(5,5,5),type="gig",nsim=50)
X = simCPLNRoot(pos,simalgo,transform="pcpp",h=1,rho=0.1)
plot(attr(X,"Lambda"),style="width",col="grey",main="")
points(X,cex=0.5)
}
